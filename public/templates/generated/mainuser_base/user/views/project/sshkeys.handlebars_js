
function anonymous(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [4, ">= 1.0.0"];
    helpers = this.merge(helpers, Ember.Handlebars.helpers);
    data = data || {};
    var buffer = "", stack1, helper, options, escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing, self = this;
    function program1(depth0, data) {
        var buffer = "", stack1, helper, options;
        data.buffer.push("\n        <div class=\"row\">\n            <div class=\"col-lg-2\">\n            </div>\n            <div class=\"alert alert-danger col-lg-8\">\n                <button type=\"button\" ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "clear", "controller", "errorMsg", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0, depth0, depth0], types:["ID", "ID", "STRING"], data:data})));
        data.buffer.push(" class=\"close\">\xd7</button>\n                <strong> ");
        data.buffer.push(escapeExpression((helper = helpers.i18n || (depth0 && depth0.i18n), options = {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["STRING"], data:data}, helper ? helper.call(depth0, "error_alert_prefix", options) : helperMissing.call(depth0, "i18n", "error_alert_prefix", options))));
        data.buffer.push("&nbsp;&nbsp;</strong>");
        stack1 = helpers._triageMustache.call(depth0, "errorMsg", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n            </div>\n        </div>\n    ");
        return buffer;
    }
    function program3(depth0, data) {
        data.buffer.push("\n        <div class=\"alert\">\n        </div>\n    ");
    }
    data.buffer.push("<a id=\"addKey\" class=\"btn btn-danger btn-lg\"  data-target=\"#createKey\" data-original-title=\"Add a new SSH Key\" data-toggle=\"collapse\">\n    <i class=\"fa fa-plus\"></i>\n    Add New Key\n</a>\n\n<div id=\"createKey\" class=\"collapse text-grey mediumtopmargin\">\n\n    ");
    stack1 = helpers["if"].call(depth0, "errorMsg", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.program(3, program3, data), fn:self.program(1, program1, data), contexts:[depth0], types:["ID"], data:data});
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n\n    <div class=\"row row-fluid col-lg-12\">\n        <div class=\"row col-lg-8 text-center\">\n                <table class=\"row smalltopmargin col-lg-12 text-grey smallleftpad\" >\n                    <thead>\n                    <th class=\"row smalltopmargin col-lg-2 text-left\"></th>\n                    <th class=\"col-lg-1 text-right\"></th>\n                    <th class=\"col-lg-7 text-left\"></th>\n                    </thead>\n                    <tr>\n                        <td>\n                            ");
    data.buffer.push(escapeExpression((helper = helpers.i18n || (depth0 && depth0.i18n), options = {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["STRING"], data:data}, helper ? helper.call(depth0, "name", options) : helperMissing.call(depth0, "i18n", "name", options))));
    data.buffer.push("\n                        </td>\n                        <td>\n                            <i class=\"fa fa-question-circle\" ");
    data.buffer.push(escapeExpression((helper = helpers["bind-attr-i18n"] || (depth0 && depth0["bind-attr-i18n"]), options = {hash:{"data-original-title":("project.create_key_tooltip")}, hashTypes:{"data-original-title":"STRING"}, hashContexts:{"data-original-title":depth0}, contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "bind-attr-i18n", options))));
    data.buffer.push(" data-toggle=\"tooltip\"></i>\n                        </td>\n                        <td>\n                            ");
    data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.NotEmptyTextField", {hash:{"class":("form-control focus"), "isValidOnFocusOutFeedbackMsgBinding":("errorMsg"), "placeholderTranslate":("project.displayname_input_placeholder"), "valueBinding":("new_key_name"), "elementId":("new_key_name")}, hashTypes:{"class":"STRING", "isValidOnFocusOutFeedbackMsgBinding":"STRING", "placeholderTranslate":"STRING", "valueBinding":"STRING", "elementId":"STRING"}, hashContexts:{"class":depth0, "isValidOnFocusOutFeedbackMsgBinding":depth0, "placeholderTranslate":depth0, "valueBinding":depth0, "elementId":depth0}, contexts:[depth0], types:["ID"], data:data})));
    data.buffer.push("\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                            ");
    data.buffer.push(escapeExpression((helper = helpers.i18n || (depth0 && depth0.i18n), options = {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["STRING"], data:data}, helper ? helper.call(depth0, "tag", options) : helperMissing.call(depth0, "i18n", "tag", options))));
    data.buffer.push("\n                        </td>\n                        <td>\n                            <i class=\"fa fa-question-circle\" ");
    data.buffer.push(escapeExpression((helper = helpers["bind-attr-i18n"] || (depth0 && depth0["bind-attr-i18n"]), options = {hash:{"data-original-title":("project.create_tag_tooltip")}, hashTypes:{"data-original-title":"STRING"}, hashContexts:{"data-original-title":depth0}, contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "bind-attr-i18n", options))));
    data.buffer.push(" data-toggle=\"tooltip\"></i>\n                        </td>\n                        <td>\n                            ");
    data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.NotEmptyNoSpaceTextField", {hash:{"class":("form-control focus"), "isValidOnFocusOutFeedbackMsgBinding":("errorMsg"), "placeholderTranslate":("project.displaytag_input_placeholder"), "valueBinding":("new_key_tag"), "elementId":("new_key_tag")}, hashTypes:{"class":"STRING", "isValidOnFocusOutFeedbackMsgBinding":"STRING", "placeholderTranslate":"STRING", "valueBinding":"STRING", "elementId":"STRING"}, hashContexts:{"class":depth0, "isValidOnFocusOutFeedbackMsgBinding":depth0, "placeholderTranslate":depth0, "valueBinding":depth0, "elementId":depth0}, contexts:[depth0], types:["ID"], data:data})));
    data.buffer.push("\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>\n                           ");
    data.buffer.push(escapeExpression((helper = helpers.i18n || (depth0 && depth0.i18n), options = {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["STRING"], data:data}, helper ? helper.call(depth0, "public_key", options) : helperMissing.call(depth0, "i18n", "public_key", options))));
    data.buffer.push("\n                        </td>\n                        <td>\n                        </td>\n                        <td>\n                            ");
    data.buffer.push(escapeExpression(helpers.view.call(depth0, "App.NotEmptyTextField", {hash:{"class":("form-control focus"), "isValidOnFocusOutFeedbackMsgBinding":("errorMsg"), "placeholderTranslate":("project.publickey_input_placeholder"), "valueBinding":("new_public_key"), "elementId":("new_public_key")}, hashTypes:{"class":"STRING", "isValidOnFocusOutFeedbackMsgBinding":"STRING", "placeholderTranslate":"STRING", "valueBinding":"STRING", "elementId":"STRING"}, hashContexts:{"class":depth0, "isValidOnFocusOutFeedbackMsgBinding":depth0, "placeholderTranslate":depth0, "valueBinding":depth0, "elementId":depth0}, contexts:[depth0], types:["ID"], data:data})));
    data.buffer.push("\n                        </td>\n                    </tr>\n\n                </table>\n\n\n            <div class=\"row smalltopmargin col-lg-12 text-grey smallleftpad\" >\n                <input ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "cancelNewKey", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data})));
    data.buffer.push(" type=\"button\" class=\"btn btn-default\"  data-target=\"#createKey\" data-toggle=\"collapse\" value=\"Cancel\">\n                </input>\n                <input  ");
    data.buffer.push(escapeExpression(helpers.action.call(depth0, "addNewKey", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data})));
    data.buffer.push(" class=\"btn btn-primary\" type=\"button\" value=\"Save\">\n                </input>\n            </div>\n\n        </div>\n    </div>\n\n</div>\n\n<div class=\"mediumtopmargin\">\n    ");
    data.buffer.push(escapeExpression((helper = helpers["key-table"] || (depth0 && depth0["key-table"]), options = {hash:{"dataBinding":("sshkeys"), "isLoaded":("view.loaded"), "tableId":("keys_table"), "template_name":("components/table/keytable"), "clickRoute":("project/sshkeys")}, hashTypes:{"dataBinding":"STRING", "isLoaded":"ID", "tableId":"STRING", "template_name":"STRING", "clickRoute":"STRING"}, hashContexts:{"dataBinding":depth0, "isLoaded":depth0, "tableId":depth0, "template_name":depth0, "clickRoute":depth0}, contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "key-table", options))));
    data.buffer.push("\n</div>\n\n");
    stack1 = helpers._triageMustache.call(depth0, "outlet", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n\n\n\n");
    return buffer;
}
