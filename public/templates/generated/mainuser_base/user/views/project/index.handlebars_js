
function anonymous(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [4, ">= 1.0.0"];
    helpers = this.merge(helpers, Ember.Handlebars.helpers);
    data = data || {};
    var buffer = "", stack1, escapeExpression = this.escapeExpression, self = this, helperMissing = helpers.helperMissing;
    function program1(depth0, data) {
        var buffer = "";
        data.buffer.push("\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <br/>\n    <div class=\"col-lg-12 text-center meidumtopmargin\">\n        <div class=\"row col-lg-12\">\n            Do you accept to join the following project ?\n        </div>\n        <br/>\n        <br/>\n        <br/>\n        <div class=\"row col-lg-12 meidumtopmargin\">\n            <div class=\"col-lg-3\">\n            </div>\n            <div class=\"col-lg-3\">\n\n                <a id=\"accept\" ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "accept", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data})));
        data.buffer.push("  class=\"btn btn-success btn-lg\"  data-original-title=\"Accept Invitation\" data-toggle=\"collapse\">\n                    Accept\n                </a>\n\n            </div>\n            <div class=\"col-lg-3\">\n\n                <a id=\"refuse\" ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "reject", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data})));
        data.buffer.push(" class=\"btn btn-danger btn-lg\"  data-original-title=\"Refuse Invitation\" data-toggle=\"collapse\">\n                    Refuse\n                </a>\n\n            </div>\n            <div class=\"col-lg-3\">\n            </div>\n        </div>\n\n    </div>\n\n\n");
        return buffer;
    }
    function program3(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n\n\n  ");
        stack1 = helpers["if"].call(depth0, "content.isConfigured", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.program(9, program9, data), fn:self.program(4, program4, data), contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n\n\n\n\n\n");
        return buffer;
    }
    function program4(depth0, data) {
        var buffer = "", stack1, helper, options;
        data.buffer.push("\n\n    Project Overview of ");
        stack1 = helpers._triageMustache.call(depth0, "content.name", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n    <br/>\n    <br/>\n\n\n    <div class=\"text-center\">\n\n        ");
        stack1 = (helper = helpers["link-to"] || (depth0 && depth0["link-to"]), options = {hash:{"tagName":("a"), "class":("quick-btn")}, hashTypes:{"tagName":"STRING", "class":"STRING"}, hashContexts:{"tagName":depth0, "class":depth0}, inverse:self.noop, fn:self.program(5, program5, data), contexts:[depth0], types:["STRING"], data:data}, helper ? helper.call(depth0, "project.servers.index", options) : helperMissing.call(depth0, "link-to", "project.servers.index", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n\n        ");
        stack1 = (helper = helpers["link-to"] || (depth0 && depth0["link-to"]), options = {hash:{"tagName":("a"), "class":("quick-btn")}, hashTypes:{"tagName":"STRING", "class":"STRING"}, hashContexts:{"tagName":depth0, "class":depth0}, inverse:self.noop, fn:self.program(7, program7, data), contexts:[depth0], types:["STRING"], data:data}, helper ? helper.call(depth0, "project.databases.index", options) : helperMissing.call(depth0, "link-to", "project.databases.index", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n\n    </div>\n  ");
        return buffer;
    }
    function program5(depth0, data) {
        data.buffer.push("\n            <i class=\"fa fa-info-circle fa-2x\"></i>\n            <span>Servers</span>\n        ");
    }
    function program7(depth0, data) {
        data.buffer.push("\n            <i class=\"fa fa-info-circle fa-2x\"></i>\n            <span>Databases</span>\n        ");
    }
    function program9(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n\n    ");
        stack1 = helpers["if"].call(depth0, "content.ProjectAdmin", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.program(12, program12, data), fn:self.program(10, program10, data), contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n\n  ");
        return buffer;
    }
    function program10(depth0, data) {
        var buffer = "", helper, options;
        data.buffer.push("\n        ");
        data.buffer.push(escapeExpression((helper = helpers.i18n || (depth0 && depth0.i18n), options = {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["STRING"], data:data}, helper ? helper.call(depth0, "project.admin_must_enable", options) : helperMissing.call(depth0, "i18n", "project.admin_must_enable", options))));
        data.buffer.push("\n    ");
        return buffer;
    }
    function program12(depth0, data) {
        var buffer = "", helper, options;
        data.buffer.push("\n        ");
        data.buffer.push(escapeExpression((helper = helpers.i18n || (depth0 && depth0.i18n), options = {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["STRING"], data:data}, helper ? helper.call(depth0, "project.admin_project_must_configure", options) : helperMissing.call(depth0, "i18n", "project.admin_project_must_configure", options))));
        data.buffer.push("\n    ");
        return buffer;
    }
    stack1 = helpers["if"].call(depth0, "content.invitetoken", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.program(3, program3, data), fn:self.program(1, program1, data), contexts:[depth0], types:["ID"], data:data});
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n\n\n\n");
    return buffer;
}
