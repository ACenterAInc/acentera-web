
function anonymous(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [4, ">= 1.0.0"];
    helpers = this.merge(helpers, Ember.Handlebars.helpers);
    data = data || {};
    var buffer = "", stack1, helper, options, escapeExpression = this.escapeExpression, helperMissing = helpers.helperMissing, self = this;
    function program1(depth0, data) {
        data.buffer.push("\n    <div class=\"col-lg-3\">\n        &nbsp;\n    </div>\n\n    <div class=\"col-lg-6\">\n\n        We apologize but someone have deleted this server.\n        <br/>\n        <br/>\n        <br/>\n\n    </div>\n\n");
    }
    function program3(depth0, data) {
        var buffer = "", stack1, helper, options;
        data.buffer.push("\n\n\n\n<br/>\n");
        stack1 = helpers["if"].call(depth0, "errorMsg", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.program(6, program6, data), fn:self.program(4, program4, data), contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n\n\n\n\n");
        stack1 = (helper = helpers["else-equal"] || (depth0 && depth0["else-equal"]), options = {hash:{"param1":("content.status"), "param2":("off")}, hashTypes:{"param1":"ID", "param2":"STRING"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(8, program8, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "else-equal", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n\n");
        stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("content.status"), "param2":("off")}, hashTypes:{"param1":"ID", "param2":"STRING"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(13, program13, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n\n");
        return buffer;
    }
    function program4(depth0, data) {
        var buffer = "", stack1, helper, options;
        data.buffer.push("\n    <div class=\"col-lg-2\">\n    </div>\n    <div class=\"alert alert-danger col-lg-8\">\n        <button type=\"button\" ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "clear", "controller", "errorMsg", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0, depth0, depth0], types:["ID", "ID", "STRING"], data:data})));
        data.buffer.push(" class=\"close\">\xd7</button>\n        <strong> ");
        data.buffer.push(escapeExpression((helper = helpers.i18n || (depth0 && depth0.i18n), options = {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["STRING"], data:data}, helper ? helper.call(depth0, "error_alert_prefix", options) : helperMissing.call(depth0, "i18n", "error_alert_prefix", options))));
        data.buffer.push("&nbsp;&nbsp;</strong>");
        stack1 = helpers._triageMustache.call(depth0, "errorMsg", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n    </div>\n");
        return buffer;
    }
    function program6(depth0, data) {
        data.buffer.push("\n    <div class=\"alert\">&nbsp;</div>\n");
    }
    function program8(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n    <div class=\"col-lg-3\">\n        &nbsp;\n    </div>\n\n    <div class=\"col-lg-6\">\n\n        ");
        stack1 = helpers["if"].call(depth0, "type", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.program(11, program11, data), fn:self.program(9, program9, data), contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n\n    </div>\n\n    <div class=\"col-lg-3\">\n        &nbsp;\n    </div>\n\n");
        return buffer;
    }
    function program9(depth0, data) {
        data.buffer.push("\n            Fast-Resize\n            <br/><br/>\n            This is not enabled from here for managed servers since it would cause downtime.\n            <br/><br/>\n            Please use an operations from the proper manage section ie: \"Database\"\n            <br/>\n            If you have any questions, feel free to create a support ticket.\n            <br/>\n            Regards,\n            The ACenterA Team.\n        ");
    }
    function program11(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n            Fast-Resize\n            <br/><br/>\n            Will allocate the upgraded RAM and Cores for your virtual server without making any disk size changes. 1 Minute downtime.\n            <br/><br/>\n            Please poweroff your server from the command line first before initiating a resize.\n            <br/><br/>\n\n            ");
        stack1 = helpers._triageMustache.call(depth0, "passwordconfirm-view", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n\n\n            <div class=\"row\" style=\"float:right\">\n\n                <a ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "powerOff", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data})));
        data.buffer.push(" class=\"mediumtopmargin btn btn-primary btn-lg\" style=\"float:left\" >Power Off</a>\n\n            </div>\n        ");
        return buffer;
    }
    function program13(depth0, data) {
        var buffer = "", stack1, helper, options;
        data.buffer.push("\n   <div class=\"row col-lg-12 text-left\">\n       <div class=\"row col-lg-3\">\n           &nbsp;\n       </div>\n       <div class=\"row col-lg-6\">\n        Fast-Resize\n        <br/><br/>\n        Will allocate the upgraded RAM and Cores for your virtual server without making any disk size changes. 1 Minute downtime.\n        <br/><br/>\n\n        Great lets do it!\n        <br/><br/>\n        After the resize is finished Boot it from the control panel: \"Power\" > \"Power On\"\n        <br/>\n        <br/>\n      </div>\n       <div class=\"row col-lg-3\">\n           &nbsp;\n       </div>\n   </div>\n\n        <div class=\"row col-lg-12 text-center\">\n            <div class=\"col-lg-2 \">&nbsp;</div>\n            <div class=\"col-lg-7 \">\n\n                ");
        data.buffer.push(escapeExpression((helper = helpers["doregionsize-view"] || (depth0 && depth0["doregionsize-view"]), options = {hash:{"content":("66"), "type":("do"), "currsizeBinding":("content.size.id"), "selsizeBinding":("selectedSize"), "availableSizesBinding":("availableSize")}, hashTypes:{"content":"STRING", "type":"STRING", "currsizeBinding":"STRING", "selsizeBinding":"STRING", "availableSizesBinding":"STRING"}, hashContexts:{"content":depth0, "type":depth0, "currsizeBinding":depth0, "selsizeBinding":depth0, "availableSizesBinding":depth0}, contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "doregionsize-view", options))));
        data.buffer.push("\n\n                ");
        data.buffer.push(escapeExpression((helper = helpers["doregionsize-view"] || (depth0 && depth0["doregionsize-view"]), options = {hash:{"content":("63"), "type":("do"), "currsizeBinding":("content.size.id"), "selsizeBinding":("selectedSize"), "availableSizesBinding":("availableSize")}, hashTypes:{"content":"STRING", "type":"STRING", "currsizeBinding":"STRING", "selsizeBinding":"STRING", "availableSizesBinding":"STRING"}, hashContexts:{"content":depth0, "type":depth0, "currsizeBinding":depth0, "selsizeBinding":depth0, "availableSizesBinding":depth0}, contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "doregionsize-view", options))));
        data.buffer.push("\n\n                ");
        data.buffer.push(escapeExpression((helper = helpers["doregionsize-view"] || (depth0 && depth0["doregionsize-view"]), options = {hash:{"content":("62"), "type":("do"), "currsizeBinding":("content.size.id"), "selsizeBinding":("selectedSize"), "availableSizesBinding":("availableSize")}, hashTypes:{"content":"STRING", "type":"STRING", "currsizeBinding":"STRING", "selsizeBinding":"STRING", "availableSizesBinding":"STRING"}, hashContexts:{"content":depth0, "type":depth0, "currsizeBinding":depth0, "selsizeBinding":depth0, "availableSizesBinding":depth0}, contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "doregionsize-view", options))));
        data.buffer.push("\n            </div>\n            <div class=\"col-lg-3 \">&nbsp;</div>\n        </div>\n        <br/>\n        <div class=\"row col-lg-12  text-center\">\n            <div class=\"col-lg-2 \">&nbsp;</div>\n            <div class=\"col-lg-7 \">\n                ");
        data.buffer.push(escapeExpression((helper = helpers["doregionsize-view"] || (depth0 && depth0["doregionsize-view"]), options = {hash:{"content":("64"), "type":("do"), "currsizeBinding":("content.size.id"), "selsizeBinding":("selectedSize"), "availableSizesBinding":("availableSize")}, hashTypes:{"content":"STRING", "type":"STRING", "currsizeBinding":"STRING", "selsizeBinding":"STRING", "availableSizesBinding":"STRING"}, hashContexts:{"content":depth0, "type":depth0, "currsizeBinding":depth0, "selsizeBinding":depth0, "availableSizesBinding":depth0}, contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "doregionsize-view", options))));
        data.buffer.push("\n\n                ");
        data.buffer.push(escapeExpression((helper = helpers["doregionsize-view"] || (depth0 && depth0["doregionsize-view"]), options = {hash:{"content":("65"), "type":("do"), "currsizeBinding":("content.size.id"), "selsizeBinding":("selectedSize"), "availableSizesBinding":("availableSize")}, hashTypes:{"content":"STRING", "type":"STRING", "currsizeBinding":"STRING", "selsizeBinding":"STRING", "availableSizesBinding":"STRING"}, hashContexts:{"content":depth0, "type":depth0, "currsizeBinding":depth0, "selsizeBinding":depth0, "availableSizesBinding":depth0}, contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "doregionsize-view", options))));
        data.buffer.push("\n\n                ");
        data.buffer.push(escapeExpression((helper = helpers["doregionsize-view"] || (depth0 && depth0["doregionsize-view"]), options = {hash:{"content":("61"), "type":("do"), "currsizeBinding":("content.size.id"), "selsizeBinding":("selectedSize"), "availableSizesBinding":("availableSize")}, hashTypes:{"content":"STRING", "type":"STRING", "currsizeBinding":"STRING", "selsizeBinding":"STRING", "availableSizesBinding":"STRING"}, hashContexts:{"content":depth0, "type":depth0, "currsizeBinding":depth0, "selsizeBinding":depth0, "availableSizesBinding":depth0}, contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "doregionsize-view", options))));
        data.buffer.push("\n            </div>\n            <div class=\"col-lg-3 \">&nbsp;</div>\n        </div>\n\n       <div class=\"row col-lg-12  text-center\">\n           <div class=\"col-lg-2 \">&nbsp;</div>\n           <div class=\"col-lg-7 \">\n                ");
        stack1 = helpers._triageMustache.call(depth0, "passwordconfirm-view", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n           </div>\n       </div>\n\n       <div class=\"row col-lg-12  text-center\">\n           <div class=\"col-lg-2 \">&nbsp;</div>\n           <div class=\"col-lg-5 \" style=\"float:right\">\n                   <a ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "resize", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data})));
        data.buffer.push(" class=\"mediumtopmargin btn btn-primary btn-lg\" style=\"float:left\" >Resize</a>\n           </div>\n       </div>\n\n");
        return buffer;
    }
    data.buffer.push("\n\n<br/>\n");
    stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("archive"), "param2":("content.status")}, hashTypes:{"param1":"STRING", "param2":"ID"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(1, program1, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n");
    stack1 = (helper = helpers["else-equal"] || (depth0 && depth0["else-equal"]), options = {hash:{"param1":("archive"), "param2":("content.status")}, hashTypes:{"param1":"STRING", "param2":"ID"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(3, program3, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "else-equal", options));
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n");
    return buffer;
}
