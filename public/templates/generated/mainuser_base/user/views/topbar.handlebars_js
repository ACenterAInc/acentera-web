
function anonymous(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [4, ">= 1.0.0"];
    helpers = this.merge(helpers, Ember.Handlebars.helpers);
    data = data || {};
    var stack1, escapeExpression = this.escapeExpression, self = this, helperMissing = helpers.helperMissing;
    function program1(depth0, data) {
        var buffer = "", stack1, helper, options;
        data.buffer.push("\n\n\n");
        stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("topbarTemplate"), "param2":("single")}, hashTypes:{"param1":"ID", "param2":"STRING"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(2, program2, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n\n");
        stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("topbarTemplate"), "param2":("dual")}, hashTypes:{"param1":"ID", "param2":"STRING"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(10, program10, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n");
        return buffer;
    }
    function program2(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n    <div class=\"main-bar col-lg-12\">\n            <h3><i ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {hash:{"class":("breadcrumb.icon")}, hashTypes:{"class":"STRING"}, hashContexts:{"class":depth0}, contexts:[], types:[], data:data})));
        data.buffer.push("></i>\n                ");
        stack1 = helpers.each.call(depth0, "v", "in", "breadcrumb", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(3, program3, data), contexts:[depth0, depth0, depth0], types:["ID", "ID", "ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n            </h3>\n    </div>\n\n");
        return buffer;
    }
    function program3(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                    ");
        stack1 = helpers["if"].call(depth0, "v.visible", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(4, program4, data), contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                ");
        return buffer;
    }
    function program4(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                        ");
        stack1 = helpers["if"].call(depth0, "v.hasNext", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.program(8, program8, data), fn:self.program(5, program5, data), contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                    ");
        return buffer;
    }
    function program5(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                            <a ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "goto", "v.routename", "v.model", "v.parent", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0, depth0, depth0, depth0], types:["ID", "ID", "ID", "ID"], data:data})));
        data.buffer.push(">\n                                ");
        stack1 = helpers._triageMustache.call(depth0, "v.name", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                            </a>\n                            ");
        stack1 = helpers["if"].call(depth0, "v.hasNext", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(6, program6, data), contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                        ");
        return buffer;
    }
    function program6(depth0, data) {
        data.buffer.push("\n                                <i class=\"icon-double-angle-right\"></i>\n                            ");
    }
    function program8(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                            ");
        stack1 = helpers._triageMustache.call(depth0, "v.name", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                        ");
        return buffer;
    }
    function program10(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n        <div class=\"search-bar col-lg-3\">\n            <!--\n                <a data-original-title=\"Show/Hide Menu\" data-placement=\"bottom\" data-tooltip=\"tooltip\" class=\"accordion-toggle btn btn-primary btn-sm visible-xs\" data-toggle=\"collapse\" href=\"#menu\" id=\"menu-toggle\">\n                    <i class=\"icon-sort\"></i>\n                </a>\n             -->\n\n            <div class=\"search-bar-inner text-center\">\n                <div class='dropdown'>\n                    ");
        stack1 = helpers["if"].call(depth0, "hasLoaded", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(11, program11, data), contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                </div>\n            </div>\n        </div><!-- .\"search-bar -->\n        <div class=\"main-bar col-lg-7\">\n            ");
        stack1 = helpers["if"].call(depth0, "hasLoaded", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(17, program17, data), contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n        </div>\n");
        return buffer;
    }
    function program11(depth0, data) {
        var buffer = "", stack1, helper, options;
        data.buffer.push("\n                        ");
        stack1 = (helper = helpers.equalObject || (depth0 && depth0.equalObject), options = {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.program(14, program14, data), fn:self.program(12, program12, data), contexts:[depth0, depth0], types:["INTEGER", "ID"], data:data}, helper ? helper.call(depth0, 1, "controller.projects.length", options) : helperMissing.call(depth0, "equalObject", 1, "controller.projects.length", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n\n                    ");
        return buffer;
    }
    function program12(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                            <div class=\"dropdown-toggle search-bar-dropdown\" >\n                                ");
        stack1 = helpers._triageMustache.call(depth0, "controller.selectedProject.name", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                            </div>\n                        ");
        return buffer;
    }
    function program14(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                                <div class=\"dropdown-toggle\" data-toggle=\"dropdown\" style=\"padding-top:8px;padding-left:1px;color: #fff;cursor:pointer;\">\n                                    ");
        stack1 = helpers._triageMustache.call(depth0, "controller.selectedProject.name", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("<b class=\"caret search-bar-caret\"></b>\n                                </div>\n                                <ul class=\"dropdown-menu dropdown-leftmenu\">\n                                    ");
        stack1 = helpers.each.call(depth0, "v", "in", "controller.projects", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(15, program15, data), contexts:[depth0, depth0, depth0], types:["ID", "ID", "ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                                    \n                                </ul>\n                        ");
        return buffer;
    }
    function program15(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                                        <li><a style=\"cursor:pointer;\" ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "changeContext", "v", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0, depth0], types:["ID", "ID"], data:data})));
        data.buffer.push(">");
        stack1 = helpers._triageMustache.call(depth0, "v.name", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</a></li>\n                                    ");
        return buffer;
    }
    function program17(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                <h3><i ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {hash:{"class":("breadcrumb.icon")}, hashTypes:{"class":"STRING"}, hashContexts:{"class":depth0}, contexts:[], types:[], data:data})));
        data.buffer.push("></i>\n                    ");
        stack1 = helpers.each.call(depth0, "v", "in", "breadcrumb", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(18, program18, data), contexts:[depth0, depth0, depth0], types:["ID", "ID", "ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                </h3>\n            ");
        return buffer;
    }
    function program18(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n\n\n                        ");
        stack1 = helpers["if"].call(depth0, "v.visible", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(19, program19, data), contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                    ");
        return buffer;
    }
    function program19(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                            ");
        stack1 = helpers["if"].call(depth0, "v.hasNext", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.program(24, program24, data), fn:self.program(20, program20, data), contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                        ");
        return buffer;
    }
    function program20(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                                ");
        stack1 = helpers["if"].call(depth0, "v.name", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(21, program21, data), contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                            ");
        return buffer;
    }
    function program21(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                                    <a ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "goto", "v.routename", "v.model", "v.parent", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0, depth0, depth0, depth0], types:["ID", "ID", "ID", "ID"], data:data})));
        data.buffer.push(">\n                                            ");
        stack1 = helpers._triageMustache.call(depth0, "v.name", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                                    </a>\n                                    ");
        stack1 = helpers["if"].call(depth0, "v.hasNext", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(22, program22, data), contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                                ");
        return buffer;
    }
    function program22(depth0, data) {
        data.buffer.push("\n                                        <i class=\"icon-double-angle-right\"></i>\n                                    ");
    }
    function program24(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                                ");
        stack1 = helpers._triageMustache.call(depth0, "v.name", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                            ");
        return buffer;
    }
    stack1 = helpers["if"].call(depth0, "hasLoaded", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(1, program1, data), contexts:[depth0], types:["ID"], data:data});
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    } else {
        data.buffer.push("");
    }
}
