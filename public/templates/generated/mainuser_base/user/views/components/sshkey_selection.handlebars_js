
function anonymous(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [4, ">= 1.0.0"];
    helpers = this.merge(helpers, Ember.Handlebars.helpers);
    data = data || {};
    var buffer = "", stack1, escapeExpression = this.escapeExpression, self = this, helperMissing = helpers.helperMissing;
    function program1(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n    <div class=\"row smallmargin\">\n\n    ");
        stack1 = helpers.each.call(depth0, "key", "in", "availableKeys", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(2, program2, data), contexts:[depth0, depth0, depth0], types:["ID", "ID", "ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n    </div>\n");
        return buffer;
    }
    function program2(depth0, data) {
        var buffer = "", stack1, helper, options;
        data.buffer.push("\n            ");
        stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("key.id"), "param2":("view.selectedKey.id")}, hashTypes:{"param1":"ID", "param2":"ID"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(3, program3, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n            ");
        stack1 = (helper = helpers["else-equal"] || (depth0 && depth0["else-equal"]), options = {hash:{"param1":("key.id"), "param2":("view.selectedKey.id")}, hashTypes:{"param1":"ID", "param2":"ID"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(5, program5, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "else-equal", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n    ");
        return buffer;
    }
    function program3(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                <div class=\"col-lg-3 btn btn-primary active smallmargin\" ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "unselectKey", "key", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0, depth0], types:["ID", "ID"], data:data})));
        data.buffer.push(">\n                    ");
        stack1 = helpers._triageMustache.call(depth0, "key.name", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("<br/>\n                </div>\n            ");
        return buffer;
    }
    function program5(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                <div class=\"col-lg-3 btn btn-inverse-grey smallmargin\" ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "selectKey", "key", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0, depth0], types:["ID", "ID"], data:data})));
        data.buffer.push(">\n                    ");
        stack1 = helpers._triageMustache.call(depth0, "key.name", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("<br/>\n                </div>\n            ");
        return buffer;
    }
    function program7(depth0, data) {
        data.buffer.push("\n    The root password will be sent by Email. <br/> <br/>\n    You may ask your administrator to add your public ssh key informations\n    <br/>\n");
    }
    data.buffer.push("\n<div class=\"row col-lg-12 text-left\">\n    <div class=\"col-lg-1 text-left\"></div>\n    <div class=\"col-lg-5 text-center\">\n        <h3>Select a SSH Key</h3>\n    </div>\n</div>\n\n");
    stack1 = helpers["if"].call(depth0, "availableKeys", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.program(7, program7, data), fn:self.program(1, program1, data), contexts:[depth0], types:["ID"], data:data});
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n");
    return buffer;
}
