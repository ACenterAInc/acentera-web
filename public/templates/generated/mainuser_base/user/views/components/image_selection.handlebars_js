
function anonymous(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [4, ">= 1.0.0"];
    helpers = this.merge(helpers, Ember.Handlebars.helpers);
    data = data || {};
    var buffer = "", stack1, escapeExpression = this.escapeExpression, self = this, helperMissing = helpers.helperMissing;
    function program1(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n    <div id=\"distributions\">\n        ");
        stack1 = helpers.each.call(depth0, "distro", "in", "distros", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(2, program2, data), contexts:[depth0, depth0, depth0], types:["ID", "ID", "ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n\n    </div>\n  ");
        return buffer;
    }
    function program2(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n            <div class=\"distro\">\n                ");
        stack1 = helpers["if"].call(depth0, "distro.selected", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.program(5, program5, data), fn:self.program(3, program3, data), contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n            </div>\n        ");
        return buffer;
    }
    function program3(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                    <a ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {hash:{"class":("distro.name")}, hashTypes:{"class":"STRING"}, hashContexts:{"class":depth0}, contexts:[], types:[], data:data})));
        data.buffer.push(" ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "selectDistro", "distro", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0, depth0], types:["ID", "ID"], data:data})));
        data.buffer.push(">\n                        ");
        stack1 = helpers._triageMustache.call(depth0, "distro.name", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                        <div class=\"icon selected\"></div>\n                    </a>\n                ");
        return buffer;
    }
    function program5(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                    <a ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {hash:{"class":("distro.name")}, hashTypes:{"class":"STRING"}, hashContexts:{"class":depth0}, contexts:[], types:[], data:data})));
        data.buffer.push(" ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "selectDistro", "distro", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0, depth0], types:["ID", "ID"], data:data})));
        data.buffer.push(">\n                        ");
        stack1 = helpers._triageMustache.call(depth0, "distro.name", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                        <div class=\"icon\"></div>\n                    </a>\n                ");
        return buffer;
    }
    function program7(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n    <div class=\"row smallmargin\">\n    ");
        stack1 = helpers.each.call(depth0, "img", "in", "availableImages", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(8, program8, data), contexts:[depth0, depth0, depth0], types:["ID", "ID", "ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n    </div>\n");
        return buffer;
    }
    function program8(depth0, data) {
        var buffer = "", stack1, helper, options;
        data.buffer.push("\n            ");
        stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("img.distribution"), "param2":("selectedDistro.name"), "v":("view.selectedImage.id")}, hashTypes:{"param1":"ID", "param2":"ID", "v":"ID"}, hashContexts:{"param1":depth0, "param2":depth0, "v":depth0}, inverse:self.noop, fn:self.program(9, program9, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n    ");
        return buffer;
    }
    function program9(depth0, data) {
        var buffer = "", stack1, helper, options;
        data.buffer.push("\n                    ");
        stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("img.id"), "param2":("view.v")}, hashTypes:{"param1":"ID", "param2":"ID"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(10, program10, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                    ");
        stack1 = (helper = helpers["else-equal"] || (depth0 && depth0["else-equal"]), options = {hash:{"param1":("img.id"), "param2":("view.v")}, hashTypes:{"param1":"ID", "param2":"ID"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(12, program12, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "else-equal", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n            ");
        return buffer;
    }
    function program10(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                        <div class=\"col-lg-3 btn btn-primary active smallmargin\" ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "selectImage", "img", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0, depth0], types:["ID", "ID"], data:data})));
        data.buffer.push(">\n                            ");
        stack1 = helpers._triageMustache.call(depth0, "img.name", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("<br/>\n                        </div>\n                    ");
        return buffer;
    }
    function program12(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                        <div class=\"col-lg-3 btn btn-inverse-grey smallmargin\" ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "selectImage", "img", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0, depth0], types:["ID", "ID"], data:data})));
        data.buffer.push(">\n                            ");
        stack1 = helpers._triageMustache.call(depth0, "img.name", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("<br/>\n                        </div>\n                    ");
        return buffer;
    }
    data.buffer.push("\n<div class=\"row col-lg-12 text-left\">\n    <div class=\"col-lg-1 text-left\"></div>\n    <div class=\"col-lg-5 text-center\">\n        <h3>Select your OS</h3>\n    </div>\n</div>\n\n<div class=\"row col-lg-12 text-center\">\n  ");
    stack1 = helpers["if"].call(depth0, "distros", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(1, program1, data), contexts:[depth0], types:["ID"], data:data});
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n</div>\n");
    stack1 = helpers["if"].call(depth0, "availableImages", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(7, program7, data), contexts:[depth0], types:["ID"], data:data});
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n");
    return buffer;
}
