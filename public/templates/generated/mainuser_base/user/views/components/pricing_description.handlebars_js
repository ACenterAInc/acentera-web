
function anonymous(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [4, ">= 1.0.0"];
    helpers = this.merge(helpers, Ember.Handlebars.helpers);
    data = data || {};
    var buffer = "", stack1, helper, options, self = this, helperMissing = helpers.helperMissing;
    function program1(depth0, data) {
        data.buffer.push("\n        New York 1\n        ");
    }
    function program3(depth0, data) {
        data.buffer.push("\n        New York 2\n        ");
    }
    function program5(depth0, data) {
        data.buffer.push("\n        San Fransico 1\n        ");
    }
    function program7(depth0, data) {
        data.buffer.push("\n        San Fransico 2\n        ");
    }
    function program9(depth0, data) {
        data.buffer.push("\n        Amsterdam 1\n        ");
    }
    function program11(depth0, data) {
        data.buffer.push("\n        Amsterdam 2\n        ");
    }
    function program13(depth0, data) {
        data.buffer.push("\n        Singapore 1\n        ");
    }
    function program15(depth0, data) {
        data.buffer.push("\n        The Application size :\n        ");
    }
    function program17(depth0, data) {
        data.buffer.push("\n        The Database size :\n        ");
    }
    function program19(depth0, data) {
        data.buffer.push("\n        512MB, 1CPU, 20GB SSD\n\n        <br/>\n        <br/>\n\n\n        ");
    }
    function program21(depth0, data) {
        data.buffer.push("\n        1GB, 1CPU, 30GB SSD\n\n        <br/>\n        <br/>\n\n        ");
    }
    function program23(depth0, data) {
        data.buffer.push("\n        2GB, 2CPU, 40GB SSD\n\n        <br/>\n        <br/>\n\n        ");
    }
    function program25(depth0, data) {
        data.buffer.push("\n        4GB, 2CPU, 60GB SSD\n\n        <br/>\n        <br/>\n\n        ");
    }
    function program27(depth0, data) {
        data.buffer.push("\n        8GB, 4CPU, 80GB SSD\n        <br/>\n        <br/>\n\n        ");
    }
    function program29(depth0, data) {
        data.buffer.push("\n        16GB, 8CPU, 160GB SSD\n        <br/>\n        <br/>\n        ");
    }
    function program31(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n              The monthly cost is ");
        stack1 = helpers._triageMustache.call(depth0, "sizemonthlyCost", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("$/month/server\n        ");
        return buffer;
    }
    data.buffer.push("\n     <div class=\"row\">\n        Current Cluster Region (Master) :\n\n        ");
    stack1 = (helper = helpers.equalObject || (depth0 && depth0.equalObject), options = {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(1, program1, data), contexts:[depth0, depth0], types:["ID", "ID"], data:data}, helper ? helper.call(depth0, "nyc1", "region", options) : helperMissing.call(depth0, "equalObject", "nyc1", "region", options));
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n        ");
    stack1 = (helper = helpers.equalObject || (depth0 && depth0.equalObject), options = {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(3, program3, data), contexts:[depth0, depth0], types:["ID", "ID"], data:data}, helper ? helper.call(depth0, "nyc2", "region", options) : helperMissing.call(depth0, "equalObject", "nyc2", "region", options));
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n\n        ");
    stack1 = (helper = helpers.equalObject || (depth0 && depth0.equalObject), options = {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(5, program5, data), contexts:[depth0, depth0], types:["ID", "ID"], data:data}, helper ? helper.call(depth0, "sfo1", "region", options) : helperMissing.call(depth0, "equalObject", "sfo1", "region", options));
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n        ");
    stack1 = (helper = helpers.equalObject || (depth0 && depth0.equalObject), options = {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(7, program7, data), contexts:[depth0, depth0], types:["ID", "ID"], data:data}, helper ? helper.call(depth0, "sfo2", "region", options) : helperMissing.call(depth0, "equalObject", "sfo2", "region", options));
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n        ");
    stack1 = (helper = helpers.equalObject || (depth0 && depth0.equalObject), options = {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(9, program9, data), contexts:[depth0, depth0], types:["ID", "ID"], data:data}, helper ? helper.call(depth0, "ams1", "region", options) : helperMissing.call(depth0, "equalObject", "ams1", "region", options));
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n        ");
    stack1 = (helper = helpers.equalObject || (depth0 && depth0.equalObject), options = {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(11, program11, data), contexts:[depth0, depth0], types:["ID", "ID"], data:data}, helper ? helper.call(depth0, "ams2", "region", options) : helperMissing.call(depth0, "equalObject", "ams2", "region", options));
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n\n        ");
    stack1 = (helper = helpers.equalObject || (depth0 && depth0.equalObject), options = {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(13, program13, data), contexts:[depth0, depth0], types:["ID", "ID"], data:data}, helper ? helper.call(depth0, "sgp1", "region", options) : helperMissing.call(depth0, "equalObject", "sgp1", "region", options));
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n        <br/>\n        <br/>\n\n\n        ");
    stack1 = helpers["if"].call(depth0, "view.isapp", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.program(17, program17, data), fn:self.program(15, program15, data), contexts:[depth0], types:["ID"], data:data});
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n        ");
    stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("cluster.size"), "param2":(66)}, hashTypes:{"param1":"ID", "param2":"INTEGER"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(19, program19, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n        ");
    stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("cluster.size"), "param2":(63)}, hashTypes:{"param1":"ID", "param2":"INTEGER"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(21, program21, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n        ");
    stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("cluster.size"), "param2":(62)}, hashTypes:{"param1":"ID", "param2":"INTEGER"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(23, program23, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n        ");
    stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("cluster.size"), "param2":(64)}, hashTypes:{"param1":"ID", "param2":"INTEGER"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(25, program25, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n        ");
    stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("cluster.size"), "param2":(65)}, hashTypes:{"param1":"ID", "param2":"INTEGER"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(27, program27, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n        ");
    stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("cluster.size"), "param2":(61)}, hashTypes:{"param1":"ID", "param2":"INTEGER"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(29, program29, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n        ");
    stack1 = helpers["if"].call(depth0, "showCost", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(31, program31, data), contexts:[depth0], types:["ID"], data:data});
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n\n        <br/>\n\n    </div>\n");
    return buffer;
}
