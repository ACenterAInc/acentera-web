
function anonymous(Handlebars, depth0, helpers, partials, data) {
    this.compilerInfo = [4, ">= 1.0.0"];
    helpers = this.merge(helpers, Ember.Handlebars.helpers);
    data = data || {};
    var buffer = "", stack1, escapeExpression = this.escapeExpression, self = this, helperMissing = helpers.helperMissing;
    function program1(depth0, data) {
        var buffer = "", stack1, helper, options;
        data.buffer.push("\n                        ");
        stack1 = (helper = helpers.eachIndexed || (depth0 && depth0.eachIndexed), options = {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.noop, fn:self.program(2, program2, data), contexts:[depth0, depth0, depth0], types:["ID", "ID", "ID"], data:data}, helper ? helper.call(depth0, "v", "in", "regionsAvailable", options) : helperMissing.call(depth0, "eachIndexed", "v", "in", "regionsAvailable", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                     ");
        return buffer;
    }
    function program2(depth0, data) {
        var buffer = "", stack1, helper, options;
        data.buffer.push("\n\n                            ");
        stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("index"), "param2":(3)}, hashTypes:{"param1":"ID", "param2":"INTEGER"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(3, program3, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                            ");
        stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("index"), "param2":(6)}, hashTypes:{"param1":"ID", "param2":"INTEGER"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(3, program3, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                            ");
        stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("index"), "param2":(9)}, hashTypes:{"param1":"ID", "param2":"INTEGER"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(3, program3, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                                ");
        stack1 = (helper = helpers["if-equal"] || (depth0 && depth0["if-equal"]), options = {hash:{"param1":("v.slug"), "param2":("slug")}, hashTypes:{"param1":"ID", "param2":"ID"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(5, program5, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "if-equal", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n\n                                ");
        stack1 = (helper = helpers["else-equal"] || (depth0 && depth0["else-equal"]), options = {hash:{"param1":("v.slug"), "param2":("slug")}, hashTypes:{"param1":"ID", "param2":"ID"}, hashContexts:{"param1":depth0, "param2":depth0}, inverse:self.noop, fn:self.program(7, program7, data), contexts:[], types:[], data:data}, helper ? helper.call(depth0, options) : helperMissing.call(depth0, "else-equal", options));
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("\n                            \n                        ");
        return buffer;
    }
    function program3(depth0, data) {
        data.buffer.push("\n                                </div><div class=\"row\">\n                            ");
    }
    function program5(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                                    <a class=\"col-lg-3 text-center quick-btn active\" style=\"height:150px;width:150px\">\n                                        <span>");
        stack1 = helpers._triageMustache.call(depth0, "v.name", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</span>\n                                        <br/>\n                                        <span ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {hash:{"class":("v.slug")}, hashTypes:{"class":"ID"}, hashContexts:{"class":depth0}, contexts:[], types:[], data:data})));
        data.buffer.push("></span>\n                                    </a>\n                                ");
        return buffer;
    }
    function program7(depth0, data) {
        var buffer = "", stack1;
        data.buffer.push("\n                                    <a class=\"col-lg-3 text-center quick-btn\" ");
        data.buffer.push(escapeExpression(helpers.action.call(depth0, "selectRegion", "v", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0, depth0], types:["ID", "ID"], data:data})));
        data.buffer.push(" style=\"height:150px;width:150px\">\n                                        <span>");
        stack1 = helpers._triageMustache.call(depth0, "v.name", {hash:{}, hashTypes:{}, hashContexts:{}, contexts:[depth0], types:["ID"], data:data});
        if (stack1 || stack1 === 0) {
            data.buffer.push(stack1);
        }
        data.buffer.push("</span>\n                                        <br/>\n                                        <span ");
        data.buffer.push(escapeExpression(helpers["bind-attr"].call(depth0, {hash:{"class":("v.slug")}, hashTypes:{"class":"ID"}, hashContexts:{"class":depth0}, contexts:[], types:[], data:data})));
        data.buffer.push("></span>\n                                    </a>\n                                ");
        return buffer;
    }
    function program9(depth0, data) {
        data.buffer.push("\n                        <div class=\"col-lg-8 text-left\">\n                            <br/>\n                           No regions available for this API Key.\n                        </div>\n                     ");
    }
    data.buffer.push("<div class=\"row\">\n\n    <br/>\n\n    <div class=\"col-lg-12\">\n\n        <div class=\"text-center\">\n            <h3>Select the region</h3>\n        </div>\n\n        <div class=\"row\">\n\n            <div class=\"col-lg-2 text-center\">\n            </div>\n            <div class=\"col-lg-2 text-right\">\n            </div>\n\n        </div>\n        <div class=\"row\">\n\n            <div id=\"collapse3\" class=\"accordion-body collapse in body\">\n                <div class=\"col-lg-12 text-center\">\n                    <div class=\"col-lg-3 text-center\">\n                    </div>\n                    <div class=\"col-lg-8 text-center\">\n\n                     ");
    stack1 = helpers["if"].call(depth0, "regionsAvailable.length", {hash:{}, hashTypes:{}, hashContexts:{}, inverse:self.program(9, program9, data), fn:self.program(1, program1, data), contexts:[depth0], types:["ID"], data:data});
    if (stack1 || stack1 === 0) {
        data.buffer.push(stack1);
    }
    data.buffer.push("\n                    </div>\n\n\n\n\n\n                </div>\n\n\n            </div>\n            <br/>\n            <br/>\n            <br/>\n        </div>\n    </div>\n</div>");
    return buffer;
}
